/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ApplicationPresentation;

import BusinessLogic.Forms.clsMain;
import BusinessLogic.Forms.clsSettings;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author jean
 */
public class frmSettings extends javax.swing.JInternalFrame {
    private final frmMain pMainForm;
    private final clsMain pMainClass;
    private final clsSettings pSettings;
    private boolean pIsStartup;
    
    private enum enmStatus {
        Edit,
        Standard
    }
    
    /**
     * Creates new form frmSettings
     * @param aMainForm
     * @param aMainClass
     */
    public frmSettings(frmMain aMainForm, clsMain aMainClass) {
        this.pMainForm = aMainForm;
        this.pMainClass = aMainClass;
        this.pSettings = new clsSettings(this.pMainClass.getProgram());
        initComponents();
        loadConfiguration();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabMain = new javax.swing.JTabbedPane();
        pnlDatabase = new javax.swing.JPanel();
        lblDatabaseType = new javax.swing.JLabel();
        lblDatabaseLocation = new javax.swing.JLabel();
        lblDatabaseName = new javax.swing.JLabel();
        lblDatabasePrefix = new javax.swing.JLabel();
        lblDatabaseUsername = new javax.swing.JLabel();
        lblDatabasePassword = new javax.swing.JLabel();
        cboDatabaseType = new javax.swing.JComboBox();
        txtDatabaseName = new javax.swing.JTextField();
        txtDatabasePrefix = new javax.swing.JTextField();
        txtDatabaseLocation = new javax.swing.JTextField();
        txtDatabaseUsername = new javax.swing.JTextField();
        txtDatabasePassword = new javax.swing.JPasswordField();
        btnEdit = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtDatabasePort = new javax.swing.JTextField();
        lblDatabasePort = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/ApplicationPresentation/Icons/black/png/cog_icon&16.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        lblDatabaseType.setText("Type:");

        lblDatabaseLocation.setText("Location:");

        lblDatabaseName.setText("Database name:");

        lblDatabasePrefix.setText("Prefix:");

        lblDatabaseUsername.setText("Username:");

        lblDatabasePassword.setText("Password:");

        cboDatabaseType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "MySQL" }));

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtDatabasePort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDatabasePortKeyTyped(evt);
            }
        });

        lblDatabasePort.setText("Port:");

        javax.swing.GroupLayout pnlDatabaseLayout = new javax.swing.GroupLayout(pnlDatabase);
        pnlDatabase.setLayout(pnlDatabaseLayout);
        pnlDatabaseLayout.setHorizontalGroup(
            pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatabaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDatabaseLocation)
                    .addComponent(lblDatabaseName)
                    .addComponent(lblDatabaseType)
                    .addComponent(lblDatabasePrefix)
                    .addComponent(lblDatabaseUsername)
                    .addComponent(lblDatabasePassword)
                    .addComponent(lblDatabasePort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDatabasePrefix)
                    .addComponent(txtDatabaseUsername)
                    .addComponent(txtDatabaseLocation)
                    .addComponent(cboDatabaseType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDatabaseName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDatabasePassword)
                    .addGroup(pnlDatabaseLayout.createSequentialGroup()
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 113, Short.MAX_VALUE))
                    .addComponent(txtDatabasePort))
                .addContainerGap())
        );
        pnlDatabaseLayout.setVerticalGroup(
            pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatabaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDatabaseType)
                    .addComponent(cboDatabaseType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatabaseLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDatabaseLocation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatabasePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDatabasePort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDatabaseName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatabasePrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDatabasePrefix))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatabaseUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDatabaseUsername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatabasePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDatabasePassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnEdit)
                    .addComponent(btnCancel))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        tabMain.addTab("Database", pnlDatabase);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ApplicationPresentation/Icons/black/png/cog_icon&48.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabMain, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabMain, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        this.pMainForm.setMenuVisible();
        this.pMainForm.closeWindowSettings();
    }//GEN-LAST:event_formInternalFrameClosed

    private void txtDatabasePortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDatabasePortKeyTyped
        char c = evt.getKeyChar();

        if (c != KeyEvent.VK_0 && c != KeyEvent.VK_1 && c != KeyEvent.VK_2 && c != KeyEvent.VK_3 && c != KeyEvent.VK_4 && c != KeyEvent.VK_5 && c != KeyEvent.VK_6 && c != KeyEvent.VK_7 && c != KeyEvent.VK_8 && c != KeyEvent.VK_9) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDatabasePortKeyTyped

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        setStatus(enmStatus.Edit);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveSettings();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        cancelSettings();
    }//GEN-LAST:event_btnCancelActionPerformed
    
    private void cancelSettings() {
        if (this.pIsStartup) {
            System.exit(0);
        } else {
            loadConfiguration();
        }
    }
    
    private boolean checkFieldsForSaving() {
        boolean returnVal = true;
        
        if (cboDatabaseType.getSelectedIndex() == 0) {
            returnVal = false;
            cboDatabaseType.setBackground(new Color(255, 50, 50));
        } else {
            cboDatabaseType.setBackground(null);
        }
        
        if ("".equals(txtDatabaseLocation.getText())) {
            returnVal = false;
            txtDatabaseLocation.setBackground(new Color(255, 200, 200));
        } else {
            txtDatabaseLocation.setBackground(null);
        }
        
        if ("".equals(txtDatabaseName.getText())) {
            returnVal = false;
            txtDatabaseName.setBackground(new Color(255, 200, 200));
        } else {
            txtDatabaseName.setBackground(null);
        }
        
        return returnVal;
    }
    
    private void saveSettings() {
        if (checkFieldsForSaving()) {
            setConfiguration();

            try {
                if (this.pSettings.testDatabaseSettings()) {

                    if (saveConfiguration()) {
                        setStatus(enmStatus.Standard);
                        JOptionPane.showMessageDialog(this, "Configuration successful!");
                        closeWindow();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Error in configuration!", "Error", 0);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }
    
    private void setStatus(enmStatus aStatus) {
        switch (aStatus) {
            case Standard:
                btnEdit.setEnabled(true);
                btnSave.setEnabled(false);
                btnCancel.setEnabled(false);
                
                cboDatabaseType.setEnabled(false);
                txtDatabaseLocation.setEnabled(false);
                txtDatabasePort.setEnabled(false);
                txtDatabaseName.setEnabled(false);
                txtDatabasePrefix.setEnabled(false);
                txtDatabaseUsername.setEnabled(false);
                txtDatabasePassword.setEnabled(false);
                break;
            case Edit:
                btnEdit.setEnabled(false);
                btnSave.setEnabled(true);
                btnCancel.setEnabled(true);
                
                cboDatabaseType.setEnabled(true);
                txtDatabaseLocation.setEnabled(true);
                txtDatabasePort.setEnabled(true);
                txtDatabaseName.setEnabled(true);
                txtDatabasePrefix.setEnabled(true);
                txtDatabaseUsername.setEnabled(true);
                txtDatabasePassword.setEnabled(true);
                break;
        }
    }
    
    private void loadConfiguration() {
        if (this.pSettings.loadConfiguration()) {
            cboDatabaseType.setSelectedItem(this.pSettings.getDatabaseType());
            txtDatabaseLocation.setText(this.pSettings.getDatabaseLocation());
            txtDatabasePort.setText(String.valueOf(this.pSettings.getDatabasePort()));
            txtDatabaseName.setText(this.pSettings.getDatabaseName());
            txtDatabasePrefix.setText(this.pSettings.getDatabasePrefix());
            txtDatabaseUsername.setText(this.pSettings.getDatabaseUsername());
            txtDatabasePassword.setText(this.pSettings.getDatabasePassword());
            
            this.pIsStartup = false;
            setStatus(enmStatus.Standard);
        } else {
            this.pIsStartup = true;
            setStatus(enmStatus.Edit);
        }
    }

    private void closeWindow() {
        JOptionPane.showMessageDialog(this, "Configuration has been set and must now be reloaded.");
        //this.pMainForm.loadConfiguration();
        this.pMainForm.setMenuVisible();
        this.setVisible(false);
        this.dispose();
    }
    
    private void setConfiguration() {
        this.pSettings.setDatabaseType((String)cboDatabaseType.getSelectedItem());
        this.pSettings.setDatabaseLocation(txtDatabaseLocation.getText());
        this.pSettings.setDatabasePort(txtDatabasePort.getText());
        this.pSettings.setDatabaseName(txtDatabaseName.getText());
        this.pSettings.setDatabasePrefix(txtDatabasePrefix.getText());
        this.pSettings.setDatabaseUsername(txtDatabaseUsername.getText());
        this.pSettings.setDatabasePassword(new String(txtDatabasePassword.getPassword()));
    }
    
    private boolean saveConfiguration() {
        if (this.pSettings.saveDatabaseSettings()) {
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "The settings could not be saved.", "Error", 0);
            return false;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cboDatabaseType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblDatabaseLocation;
    private javax.swing.JLabel lblDatabaseName;
    private javax.swing.JLabel lblDatabasePassword;
    private javax.swing.JLabel lblDatabasePort;
    private javax.swing.JLabel lblDatabasePrefix;
    private javax.swing.JLabel lblDatabaseType;
    private javax.swing.JLabel lblDatabaseUsername;
    private javax.swing.JPanel pnlDatabase;
    private javax.swing.JTabbedPane tabMain;
    private javax.swing.JTextField txtDatabaseLocation;
    private javax.swing.JTextField txtDatabaseName;
    private javax.swing.JPasswordField txtDatabasePassword;
    private javax.swing.JTextField txtDatabasePort;
    private javax.swing.JTextField txtDatabasePrefix;
    private javax.swing.JTextField txtDatabaseUsername;
    // End of variables declaration//GEN-END:variables
}
